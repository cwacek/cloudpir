// Generated by CoffeeScript 1.4.0
var util = (function() {
  var AESHexTranslator, DbProvider, Log, Profiler, SpreadsheetDbProvider, SpreadsheetQueryProvider, decodeMatrix, encodeMatrix, inspectArray, profile, safeVectorAdd, safeVectorMultiply, _encodeArray, _encodeVector,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  inspectArray = function(arr) {
    var elem, _i, _len, _results;
    if (arr == null) {
      return null;
    }
    _results = [];
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      elem = arr[_i];
      _results.push(elem.toStr(10));
    }
    return _results;
  };

  Profiler = (function() {

    function Profiler() {
      this._t = {};
    }

    Profiler.prototype.addTime = function(label, time) {
      if (!(this._t[label] != null)) {
        return this._t[label] = {
          sum: time,
          count: 1
        };
      } else {
        this._t[label].sum += time;
        return this._t[label].count++;
      }
    };

    Profiler.prototype.print = function() {
      var label, str;
      str = "";
      for (label in this._t) {
        str += "" + label + ": " + this._t[label].count + " calls, " + this._t[label].sum + " ms\n";
      }
      return str;
    };

    return Profiler;

  })();

  profile = new Profiler();

  Log = function(string) {
    if (typeof console !== "undefined" && console !== null) {
      return console.log(string);
    } else if (typeof Logger !== "undefined" && Logger !== null) {
      return Logger.log(string);
    }
  };

  DbProvider = (function() {

    DbProvider.prototype._it = 0;

    function DbProvider(size, translator) {
      this.size = size;
      this.translator = translator;
      this.each = __bind(this.each, this);

      this.next = __bind(this.next, this);

      this.reset = __bind(this.reset, this);

      this._it = 0;
    }

    DbProvider.prototype.reset = function() {
      return this._it = 0;
    };

    DbProvider.prototype.next = function() {
      var elem;
      if (this._it === this.size) {
        return null;
      }
      elem = this.at(this._it);
      this._it++;
      return elem;
    };

    DbProvider.prototype.each = function(func) {
      this.reset();
      while (this._it < this.size) {
        func(this.next());
      }
      this.reset();
      return this.size;
    };

    return DbProvider;

  })();

  AESHexTranslator = (function() {

    function AESHexTranslator(key, options) {
      this.key = key;
      this.options = options != null ? options : {};
      this.translate = __bind(this.translate, this);

      this.mode = this.options.mode || new Crypto.mode.OFB;
      this.chain = this.options.chain || null;
      this.key = this.key instanceof Array ? this.key : Crypto.util.hexToBytes(this.key);
      this.options.padLen = this.options.padLen || -1;
    }

    AESHexTranslator.prototype.setPadLength = function(len) {
      return this.options.padLen = len;
    };

    AESHexTranslator.prototype.translate = function(val, iv) {
      var bytes;
      if (iv == null) {
        iv = null;
      }
      bytes = Crypto.util.hexToBytes(val);
      bytes = Crypto.AES.decrypt(bytes, this.key, {
        mode: this.mode,
        iv: iv,
        asBytes: true
      });
      while (bytes.length < this.options.padLen && this.options.padLen > 0) {
        bytes.push(255);
      }
      if (this.chain) {
        bytes = this.chain(bytes);
      }
      return bytes;
    };

    AESHexTranslator.prototype.decrypt = function(val, iv) {
      if (iv == null) {
        iv = null;
      }
      return this.translate(val, iv);
    };

    AESHexTranslator.UTFChainHelper = function(chain) {
      return function(val) {
        return chain(Crypto.charenc.UTF8.bytesToString(val));
      };
    };

    AESHexTranslator.prototype.encrypt = function(val, iv) {
      var bytes;
      if (iv == null) {
        iv = null;
      }
      bytes = Crypto.charenc.UTF8.stringToBytes(val);
      Crypto.AES.encrypt(bytes, this.key, {
        mode: this.mode,
        iv: iv,
        asBytes: true,
        in_place: true
      });
      return Crypto.util.bytesToHex(bytes);
    };

    AESHexTranslator.prototype.generateDbElem = function(val, params) {
      var bytes;
      bytes = Crypto.charenc.UTF8.stringToBytes(val);
      if (bytes.length > (params.l / 8)) {
        throw new Error("Requested value is more than " + (params.l / 8) + " bytes");
      }
      Crypto.AES.encrypt(bytes, this.key, {
        mode: this.mode,
        as_bytes: true,
        in_place: true
      });
      return Crypto.util.bytesToHex(bytes);
    };

    return AESHexTranslator;

  })();

  SpreadsheetDbProvider = (function(_super) {

    __extends(SpreadsheetDbProvider, _super);

    function SpreadsheetDbProvider(size, translator, sheetname, colnum) {
      this.size = size;
      this.translator = translator;
      this.sheetname = sheetname;
      this.colnum = colnum;
      this._it = 0;
      Log("Creating SpreadsheetDbProvider for sheet " + this.sheetname);
      this.timers = [];
    }

    SpreadsheetDbProvider.prototype.at = function(i) {
      var range, sheet, ss, starttimer, val;
      starttimer = new Date();
      if (i > this.size) {
        throw new Error("OutOfRange");
      }
      ss = SpreadsheetApp.getActiveSpreadsheet();
      sheet = ss.getSheetByName(this.sheetname);
      range = sheet.getRange(1 + i, this.colnum);
      val = range.getValue();
      if (this.translator != null) {
        val = this.translator(val);
      }
      this.timers.push(new Date().getTime() - starttimer.getTime());
      return val;
    };

    return SpreadsheetDbProvider;

  })(DbProvider);

  SpreadsheetQueryProvider = (function(_super) {

    __extends(SpreadsheetQueryProvider, _super);

    function SpreadsheetQueryProvider(size, translator, sheet, start_ref, N) {
      this.size = size;
      this.translator = translator;
      this.sheet = sheet;
      this.N = N;
      this._it = 0;
      Log("Creating QueryProvider on sheet " + this.sheet + " at " + start_ref);
      this.start_row = this.sheet.getRange(start_ref).getRow();
      this.start_column = this.sheet.getRange(start_ref).getColumn();
      this.timers = [];
    }

    SpreadsheetQueryProvider.prototype.at = function(i) {
      var joined, range, starttimer, values;
      starttimer = new Date();
      if (i > this.size) {
        throw new Error("OutOfRange");
      }
      range = this.sheet.getRange(this.start_row + i, this.start_column, 1, this.N);
      values = range.getValues();
      joined = values[0].join("|");
      if (this.translator != null) {
        joined = this.translator(joined);
      }
      this.timers.push(new Date().getTime() - starttimer.getTime());
      return joined;
    };

    return SpreadsheetQueryProvider;

  })(DbProvider);

  _encodeVector = function(vec) {
    var val;
    val = [];
    vec.each(function(e) {
      return val.push(bigint.FromInt(e).toStr(32));
    });
    return val.join();
  };

  _encodeArray = function(arr) {
    var convert, e;
    convert = function(elem) {
      if (elem instanceof bigint) {
        return elem.toStr(32);
      } else {
        return bigint.FromInt(e).toStr(32);
      }
    };
    return ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        e = arr[_i];
        _results.push(convert(e));
      }
      return _results;
    })()).join();
  };

  encodeMatrix = function(m) {
    var ret, v;
    if (m[0] instanceof Array) {
      ret = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = m.length; _i < _len; _i++) {
          v = m[_i];
          _results.push(_encodeArray(v));
        }
        return _results;
      })()).join("|");
    } else {
      ret = _encodeArray(m);
    }
    return ret;
  };

  decodeMatrix = function(string) {
    var resultArr, row, rows, _fn, _i, _len;
    resultArr = [];
    rows = string.split("|");
    _fn = function(row) {
      var b32StoBigInt, b32StoInt, elem, elems;
      b32StoInt = function(str) {
        var val;
        val = bigint.parseFromString(str, 32, 2);
        return val.asInt();
      };
      b32StoBigInt = function(str) {
        return bigint.parseFromString(str, 32, 2);
      };
      elems = (function() {
        var _j, _len1, _ref, _results;
        _ref = row.split(",");
        _results = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          elem = _ref[_j];
          var timer = new Date().getTime()
          _results.push(b32StoBigInt(elem));
          profile.addTime('parseFromString',newDate().getTime() - timer)
        }
        return _results;
      })();
      return resultArr.push(elems);
    };
    for (_i = 0, _len = rows.length; _i < _len; _i++) {
      row = rows[_i];
      _fn(row);
    }
    return resultArr;
  };

  safeVectorAdd = function(v1, v2, modulo) {
    var e, i, timer, _i, _len, _results;
    if (modulo == null) {
      throw new Error("InsufficientArgs");
    }
    _results = [];
    for (i = _i = 0, _len = v1.length; _i < _len; i = ++_i) {
      e = v1[i];
      timer = new Date().getTime();
      e.addEquals(v2[i]);
      profile.addTime('add', new Date().getTime() - timer);
      timer = new Date().getTime();
      e.modEquals(modulo);
      profile.addTime('modulo', new Date().getTime() - timer);
      _results.push(e);
    }
    return _results;
  };

  safeVectorMultiply = function(v, scalar, modulo) {
    var rowelem, timer, _i, _len, _results;
    if (modulo == null) {
      throw new Error("InsufficientArgs");
    }
    if (typeof scalar === !"BigInt") {
      throw new Error("Invalid Type");
    }
    _results = [];
    for (_i = 0, _len = v.length; _i < _len; _i++) {
      rowelem = v[_i];
      timer = new Date().getTime();
      rowelem.multiplyEquals(scalar);
      profile.addTime('multiply', new Date().getTime() - timer);
      timer = new Date().getTime();
      rowelem.modEquals(modulo);
      profile.addTime('modulo', new Date().getTime() - timer);
      _results.push(rowelem);
    }
    return _results;
  };

  return {
    decodeMatrix: decodeMatrix,
    safeVectorAdd: safeVectorAdd,
    safeVectorMultiply: safeVectorMultiply,
    encodeMatrix: encodeMatrix,
    DbProvider: DbProvider,
    SpreadsheetDbProvider: SpreadsheetDbProvider,
    SpreadsheetQueryProvider: SpreadsheetQueryProvider,
    Log: Log,
    inspectArray: inspectArray,
    AESHexTranslator: AESHexTranslator,
    Profiler: profile
  };

}).call(this);
